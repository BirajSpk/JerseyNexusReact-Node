// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]
  blogs   Blog[]

  @@map("users")
}

model Category {
  id        String       @id @default(cuid())
  name      String
  slug      String       @unique
  type      String       @default("PRODUCT")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  products Product[]
  blogs    Blog[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  categoryId  String
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?
  slug            String  @unique
  
  // Images as simple text field (JSON string)
  images String? // JSON string of array: [{url: string, altText: string, isPrimary: boolean}]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Float
  status      String      @default("PENDING")
  
  // Shipping info as JSON string
  shippingAddress String // JSON string: {name, phone, address, city, postalCode}
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int    // 1-5 stars
  comment   String?
  
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Ensure one review per user per product
  @@unique([userId, productId])
  @@map("reviews")
}

model Blog {
  id         String  @id @default(cuid())
  title      String
  content    String  // Rich text content
  categoryId String
  authorId   String
  published  Boolean @default(false)
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?
  slug            String  @unique
  
  // Images as simple text field (JSON string)
  images String? // JSON string of array: [{url: string, altText: string, isPrimary: boolean}]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blogs")
}