// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  phone     String?
  address   String?   // JSON string: {street, city, state, postalCode, country}
  role      String   @default("USER") // USER, ADMIN
  status    String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]
  blogs   Blog[]

  @@map("users")
}

model Category {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  type        String       @default("PRODUCT") // PRODUCT, BLOG
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  products Product[]
  blogs    Blog[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?  // For discounted products
  stock       Int     @default(0)
  categoryId  String
  sizes       String? // JSON string of available sizes: ["S", "M", "L", "XL"]
  colors      String? // JSON string of available colors: [{name: "Red", code: "#FF0000"}]
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?
  slug            String  @unique
  
  // Images as simple text field (JSON string) - keeping for backward compatibility
  images String? // JSON string of array: [{url: string, altText: string, isPrimary: boolean}]
  
  // Product status
  featured    Boolean @default(false)
  status      String  @default("ACTIVE") // ACTIVE, INACTIVE, OUT_OF_STOCK
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  orderItems OrderItem[]
  reviews    Review[]
  productImages ProductImage[] // New relation for multiple images

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String  // Image URL
  altText   String? // Alt text for accessibility
  isPrimary Boolean @default(false) // Is this the primary/main image
  sortOrder Int     @default(0) // Order for displaying images

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Float
  shippingCost Float      @default(0)
  discountAmount Float    @default(0)
  status      String      @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  paymentMethod String    @default("COD") // COD, KHALTI, ESEWA
  paymentStatus String    @default("PENDING") // PENDING, PAID, FAILED, REFUNDED, CANCELLED
  paymentId   String?     // External payment ID (Khalti/eSewa)
  trackingNumber String?
  
  // Shipping info as JSON string
  shippingAddress String // JSON string: {name, phone, address, city, postalCode, country}
  
  // Order notes
  notes       String?
  adminNotes  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    OrderItem[]
  payments Payment[]   // Payment attempts for this order

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id              String   @id @default(cuid())
  orderId         String?
  amount          Float    // Payment amount
  currency        String   @default("NPR")
  method          String   // KHALTI, ESEWA, COD
  status          String   @default("PENDING") // PENDING, SUCCESS, FAILED, CANCELLED, REFUNDED

  // External payment gateway details
  externalId      String?  // Payment ID from Khalti/eSewa
  gatewayResponse Json?    // Full response from payment gateway

  // Transaction details
  transactionId   String?  // Internal transaction ID
  referenceId     String?  // Reference ID for tracking

  // Payment metadata
  metadata        Json?    // Additional payment information
  failureReason   String?  // Reason for payment failure

  // Timestamps
  initiatedAt     DateTime @default(now())
  completedAt     DateTime?
  failedAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int    // 1-5 stars
  comment   String?
  
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Ensure one review per user per product
  @@unique([userId, productId])
  @@map("reviews")
}

model Blog {
  id         String  @id @default(cuid())
  title      String
  content    String  // Rich text content
  categoryId String
  authorId   String
  published  Boolean @default(false)
  status     String  @default("DRAFT") // DRAFT, PUBLISHED

  // SEO Fields
  metaTitle       String?
  metaDescription String?
  slug            String  @unique

  // Featured image for blog posts
  featuredImage String? // URL to the featured image

  // Images as simple text field (JSON string)
  images String? // JSON string of array: [{url: string, altText: string, isPrimary: boolean}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blogs")
}